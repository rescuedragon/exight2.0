name: CI - Build, Lint & Test

on:
  pull_request:
    branches: [main, dev]
  push:
    branches: [dev]

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check lockfile integrity
        run: npm run lockfile:check

      - name: Run linting
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Build with analysis (for PRs)
        if: github.event_name == 'pull_request'
        run: npm run build:analyze

      - name: Check build artifacts
        run: |
          echo "üîç Checking build artifacts..."
          if [ ! -d "dist" ]; then
            echo "‚ùå dist directory not found"
            exit 1
          fi

          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå index.html not found in dist"
            exit 1
          fi

          echo "‚úÖ Core build artifacts present"

          # Detect any JS/CSS files anywhere under dist
          js_files=$(find dist -type f -name "*.js" 2>/dev/null | wc -l | tr -d ' ')
          css_files=$(find dist -type f -name "*.css" 2>/dev/null | wc -l | tr -d ' ')
          if [ "$js_files" -eq 0 ]; then
            echo "‚ùå No JS files found under dist. Unexpected build layout."
            ls -la dist || true
            exit 1
          fi

          echo "üìä Largest built files (top 20):"
          find dist -type f -printf "%s\t%p\n" | sort -nr | head -n 20 | awk '{kb=$1/1024; printf("%8.0f KB  %s\n", kb, $2)}'

          # Calculate total JS and CSS sizes (bytes) across dist
          total_js=$(find dist -type f -name "*.js" -printf "%s\n" 2>/dev/null | awk '{s+=$1} END{print s+0}')
          total_css=$(find dist -type f -name "*.css" -printf "%s\n" 2>/dev/null | awk '{s+=$1} END{print s+0}')
          echo "üì¶ Total JS: $((total_js/1024)) KB | Total CSS: $((total_css/1024)) KB"

          # Enforce budgets
          max_total_js=$((2*1024*1024))      # 2 MB total JS (raw)
          max_chunk_js=$((700*1024))         # 700 KB per JS file (raw)
          max_asset_img=$((600*1024))        # 600 KB per image asset (raw)

          if [ "$total_js" -gt "$max_total_js" ]; then
            echo "‚ùå Total JS too large: $((total_js/1024)) KB (max: $((max_total_js/1024)) KB)"
            exit 1
          fi

          # Per-file JS budget
          too_big_js=$(find dist -type f -name "*.js" -size +${max_chunk_js}c -printf "%p (%s bytes)\n" 2>/dev/null | sed -n '1p')
          if [ -n "$too_big_js" ]; then
            echo "‚ùå A JS chunk exceeds limit ($((max_chunk_js/1024)) KB): $too_big_js"
            echo "Tip: verify code-splitting and lazy-load heavy routes/components."
            exit 1
          fi

          # Per-file image budget (png|jpg|jpeg|webp|avif|svg) anywhere under dist
          too_big_img=$(find dist -type f \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.webp" -o -iname "*.avif" -o -iname "*.svg" \) -size +${max_asset_img}c -printf "%p (%s bytes)\n" 2>/dev/null | sed -n '1p')
          if [ -n "$too_big_img" ]; then
            echo "‚ùå An image exceeds limit ($((max_asset_img/1024)) KB): $too_big_img"
            echo "Tip: use responsive images, compression, or modern formats (WebP/AVIF)."
            exit 1
          fi

          echo "‚úÖ Bundle and asset sizes within limits"

      - name: Upload build artifacts (for debugging)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

      - name: Upload bundle analysis (for debugging)
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: dist/stats.html
          retention-days: 7
